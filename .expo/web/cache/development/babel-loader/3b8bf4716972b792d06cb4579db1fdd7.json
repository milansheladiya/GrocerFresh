{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { collection, doc, getDocs, getDoc, get, Timestamp, query, where, collectionGroup } from \"firebase/firestore\";\nvar db = getFirestore();\nexport var readAllHandler = function readAllHandler(arr) {\n  var querySnapshot, _querySnapshot, _querySnapshot2;\n\n  return _regeneratorRuntime.async(function readAllHandler$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          [\"grocery\", \"fruits\", \"fruits\"];\n\n          if (!(arr.length === 1)) {\n            _context.next = 8;\n            break;\n          }\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(getDocs(collection(db, arr[0])));\n\n        case 4:\n          querySnapshot = _context.sent;\n          return _context.abrupt(\"return\", querySnapshot);\n\n        case 8:\n          if (!(arr.length === 2)) {\n            _context.next = 15;\n            break;\n          }\n\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(getDocs(collection(db, arr[0], arr[1])));\n\n        case 11:\n          _querySnapshot = _context.sent;\n          return _context.abrupt(\"return\", _querySnapshot);\n\n        case 15:\n          if (!(arr.length === 3)) {\n            _context.next = 20;\n            break;\n          }\n\n          _context.next = 18;\n          return _regeneratorRuntime.awrap(getDocs(collection(db, arr[0], arr[1], arr[2])));\n\n        case 18:\n          _querySnapshot2 = _context.sent;\n          return _context.abrupt(\"return\", _querySnapshot2);\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var readAllWithId = function readAllWithId(arr) {\n  var docRef, docSnap;\n  return _regeneratorRuntime.async(function readAllWithId$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(arr.length < 2)) {\n            _context2.next = 5;\n            break;\n          }\n\n          console.log(\"need collection and id\");\n          return _context2.abrupt(\"return\", \"min 2 argument needed! (collection , DocId)\");\n\n        case 5:\n          if (arr.length === 2) {\n            docRef = doc(db, arr[0], arr[1]);\n          } else if (arr.length === 3) {\n            docRef = doc(db, arr[0], arr[1], arr[2]);\n          } else if (arr.length === 4) {\n            docRef = doc(db, arr[0], arr[1], arr[2], arr[3]);\n          }\n\n        case 6:\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(getDoc(docRef));\n\n        case 8:\n          docSnap = _context2.sent;\n\n          if (!docSnap.exists()) {\n            _context2.next = 13;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", docSnap);\n\n        case 13:\n          return _context2.abrupt(\"return\", \"No such document!\");\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var ReadByQuelryHandler = function ReadByQuelryHandler(query) {\n  var querySnapshot;\n  return _regeneratorRuntime.async(function ReadByQuelryHandler$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(getDocs(query));\n\n        case 2:\n          querySnapshot = _context3.sent;\n          return _context3.abrupt(\"return\", querySnapshot);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/Users/sahiththota/React-Node Works/ClassWork/GrocerFresh/src/Firebase/read.js"],"names":["getFirestore","collection","doc","getDocs","getDoc","get","Timestamp","query","where","collectionGroup","db","readAllHandler","arr","length","querySnapshot","readAllWithId","console","log","docRef","docSnap","exists","ReadByQuelryHandler"],"mappings":"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","sourcesContent":["import { getFirestore } from \"firebase/firestore\";\nimport { collection,doc,getDocs,getDoc,get,Timestamp,query, where,collectionGroup } from \"firebase/firestore\";\n\nconst db = getFirestore();\n\nexport const readAllHandler = async (arr) => {\n    [\"grocery\",\"fruits\",\"fruits\"]\n\n    if(arr.length === 1){\n        const querySnapshot = await getDocs(collection(db, arr[0]));\n        // querySnapshot.forEach((doc) => {\n        //   console.log(doc.id, \" => \", doc.data());\n        // });\n        return querySnapshot;\n\n    \n    }\n    else if(arr.length === 2){\n        const querySnapshot = await getDocs(collection(db, arr[0], arr[1]));\n        return querySnapshot;\n    }\n    else if(arr.length === 3){\n        const querySnapshot = await getDocs(collection(db, arr[0], arr[1],arr[2]));\n        return querySnapshot;\n    }\n};\n\n\nexport const readAllWithId = async (arr) => {\n\n    let docRef;\n    let docSnap;\n\n    if(arr.length < 2)\n    {\n        console.log(\"need collection and id\");\n        return \"min 2 argument needed! (collection , DocId)\";\n    }\n    else if(arr.length === 2){\n        docRef = doc(db, arr[0], arr[1]);\n    }\n    else if(arr.length === 3){\n        docRef = doc(db, arr[0], arr[1],arr[2]);\n    }\n    else if(arr.length === 4){\n        docRef = doc(db, arr[0], arr[1],arr[2],arr[3]);\n    }\n    \n\n    docSnap = await getDoc(docRef);\n\n    if (docSnap.exists()) {\n        //console.log(\"Document data:\", docSnap.data());\n        return docSnap;\n    } else {\n        // console.log(\"No such document!\");\n        return \"No such document!\";\n    }\n};\n\n\n\nexport const ReadByQuelryHandler = async (query) => {\n\n    //const query = query(citiesRef, where(\"state\", \"==\", \"CO\"), where(\"name\", \"==\", \"Denver\"));\n    //const query = query(collection(db, \"users\"), where(\"capital\", \"==\", true));\n  const querySnapshot = await getDocs(query);\n//   querySnapshot.forEach((doc) => {\n//     console.log(doc.id, \" => \", doc.data());\n//   });\n  return querySnapshot;\n      \n};"]},"metadata":{},"sourceType":"module"}